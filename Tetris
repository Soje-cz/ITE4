# Tetris hra v Pythonu s využitím knihovny Pygame

import pygame
import random

# Inicializace Pygame
pygame.init()

# Nastavení herních konstant
SCREEN_WIDTH, SCREEN_HEIGHT = 300, 600
BLOCK_SIZE = 30
GRID_WIDTH, GRID_HEIGHT = SCREEN_WIDTH // BLOCK_SIZE, SCREEN_HEIGHT // BLOCK_SIZE
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Inicializace obrazovky
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Tetris")

# Definice tvarů tetromina
SHAPES = [
    [[1, 1, 1, 1]],  # I
    [[1, 1, 1], [0, 1, 0]],  # T
    [[1, 1, 1], [1, 0, 0]],  # L
    [[1, 1, 1], [0, 0, 1]],  # J
    [[1, 1], [1, 1]],  # O
    [[1, 1, 0], [0, 1, 1]],  # Z
    [[0, 1, 1], [1, 1, 0]]  # S
]

# Inicializace herních proměnných
# Inicializace herních proměnných
grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]
current_shape = random.choice(SHAPES)
current_x, current_y = GRID_WIDTH // 2, 0
score = 0

# Funkce pro vykreslení skóre
def draw_score():
    font = pygame.font.Font(None, 36)
    text = font.render(f"Skóre: {score}", True, WHITE)
    screen.blit(text, (10, 10))

# Hlavní herní smyčka
clock = pygame.time.Clock()
fall_time = 0
fall_speed = 0.5

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        current_x -= 1
    if keys[pygame.K_RIGHT]:
        current_x += 1
    if keys[pygame.K_DOWN]:
        current_y += 1
    if keys[pygame.K_UP]:
        # Rotace tetromina
        current_shape = list(zip(*current_shape[::-1]))

    pygame.display.flip()
    fall_time += clock.get_rawtime()
    clock.tick()

    # Pohyb tetromina dolů
    if fall_time / 1000 >= fall_speed:
        current_y += 1
        fall_time = 0

    # Kontrola kolize s okraji nebo jinými bloky
    for y, row in enumerate(current_shape):
        for x, val in enumerate(row):
            if val:
                if current_x + x < 0 or current_x + x >= GRID_WIDTH or current_y + y >= GRID_HEIGHT or grid[current_y + y][current_x + x]:
                    # Reset pozice tetromina
                    current_y -= 1
                    # Přidání tetromina do mřížky
                    for y, row in enumerate(current_shape):
                        for x, val in enumerate(row):
                            if val:
                                grid[current_y + y][current_x + x] = 1
                    # Generování nového tetromina
                    current_shape = random.choice(SHAPES)
                    current_x, current_y = GRID_WIDTH // 2, 0
                    break

    # Smaž řádky
    for y, row in enumerate(grid):
        if all(val for val in row):
            del grid[y]
            grid.insert(0, [0] * GRID_WIDTH)
            score += 10  # Přičti skóre za smazanou řádku



    # Vykresli mřížku
    screen.fill(BLACK)
    for y, row in enumerate(grid):
        for x, val in enumerate(row):
            if val:
                pygame.draw.rect(screen, WHITE, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

    # Vykresli aktuální tetromino
    for y, row in enumerate(current_shape):
        for x, val in enumerate(row):
            if val:
                pygame.draw.rect(screen, WHITE, ((current_x + x) * BLOCK_SIZE, (current_y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

    # Vykresli skóre
    draw_score()

    pygame.display.flip()
    pygame.time.Clock().tick(5)
